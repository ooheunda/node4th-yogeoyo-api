generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @unique @map("email")
  password  String   @map("password")
  name      String   @map("name")
  address   String   @map("address")
  role      Role     @map("role")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Stores  Stores?
  Orders  Orders[]
  Reviews Reviews[]
  Points  Points[]

  @@map("Users")
}

enum Role {
  user
  owner
  admin
}

model Points {
  pointId Int      @id @default(autoincrement()) @map("pointId")
  userId  Int      @map("userId")
  howMuch Int      @map("howMuch")
  when    DateTime @map("when")

  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@map("Points")
}

model Stores {
  storeId   Int         @id @default(autoincrement()) @map("storeid")
  userId    Int         @unique @map("userId")
  name      String      @map("name")
  address   String      @map("address")
  category  Category    @map("category")
  status    StoreStatus @map("status")
  createdAt DateTime    @default(now()) @map("createdAt")
  updatedAt DateTime    @updatedAt @map("updatedAt")

  user    Users     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  Menus   Menus[]
  Orders  Orders[]
  Reviews Reviews[]

  @@map("Stores")
}

enum StoreStatus {
  opened
  closed
}

model Menus {
  menuId    Int        @id @default(autoincrement()) @map("menuId")
  storeId   Int        @map("storeId")
  name      String     @map("name")
  price     Int        @map("price")
  image     String?    @map("image")
  stock     Int        @map("stock")
  category  Category   @map("category")
  status    MenuStatus @map("status")
  createdAt DateTime   @default(now()) @map("createdAt")
  updatedAt DateTime   @updatedAt @map("updatedAt")

  store Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade, onUpdate: Cascade)

  @@map("Menus")
}

enum MenuStatus {
  in_stock
  sold_out
}

enum Category {
  chicken
  pizza
  burger
  salad
  korean_food
  japanese_food
  chinese_food
  snack_bar
  cafe
  etc
}

model Orders {
  orderId    Int         @id @default(autoincrement()) @map("orderId")
  userId     Int?        @map("userId")
  storeId    Int?        @map("storeId")
  request    String?     @map("request")
  totalPrice Int         @map("totalPrice")
  status     OrderStatus @map("status")
  createdAt  DateTime    @default(now()) @map("createdAt")
  updatedAt  DateTime    @updatedAt @map("updatedAt")

  user       Users?       @relation(fields: [userId], references: [userId], onDelete: SetNull, onUpdate: SetNull)
  store      Stores?      @relation(fields: [storeId], references: [storeId], onDelete: SetNull, onUpdate: SetNull)
  Reviews    Reviews?
  OrderItems OrderItems[]

  @@map("Orders")
}

enum OrderStatus {
  accepted
  rejected
  complete
}

model OrderItems {
  orderItemId Int @id @default(autoincrement()) @map("orderItemId")
  orderId     Int @map("orderId")
  menuId      Int @map("menuId")
  quantity    Int @map("quantity")

  order Orders @relation(fields: [orderId], references: [orderId], onDelete: Cascade, onUpdate: Cascade)
}

model Reviews {
  reviewId  Int      @id @default(autoincrement()) @map("reviewId")
  userId    Int      @map("userId")
  storeId   Int      @map("storeId")
  orderId   Int      @unique @map("orderid")
  rating    Int      @map("rating")
  content   String   @map("content")
  image     String?  @map("image")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  user  Users  @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  store Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade, onUpdate: Cascade)
  order Orders @relation(fields: [orderId], references: [orderId], onDelete: Cascade, onUpdate: Cascade)

  @@map("Reviews")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @map("email")
  password  String   @map("password")
  name      String   @map("name")
  point     Int?     @map("point")
  address   String   @map("address")
  grade     Grade    @map("grade")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @map("updatedAt")

  Stores  Stores?
  Orders  Orders[]
  Reviews Reviews[]

  @@map("Users")
}

enum Grade {
  user
  admin
}

model Stores {
  storeId   Int      @id @default(autoincrement()) @map("storeid")
  userId    Int      @unique @map("userId")
  name      String   @map("name")
  address   String   @map("address")
  category  Category @map("category")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @map("updatedAt")

  user    Users     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  Menus   Menus[]
  Orders  Orders[]
  Reviews Reviews[]

  @@map("Store")
}

model Menus {
  menuId    Int      @id @default(autoincrement()) @map("menuId")
  storeId   Int      @map("storeId")
  name      String   @map("name")
  price     Int      @map("price")
  image     String?  @map("image")
  category  Category @map("category")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @map("updatedAt")

  store Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade, onUpdate: Cascade)

  @@map("Menu")
}

enum Category {
  fastfood
  dessert
  etc
}

model Orders {
  orderId    Int      @id @default(autoincrement()) @map("orderId")
  userId     Int      @map("userId")
  menuId     Int      @map("menuId")
  storeId    Int      @map("storeId")
  request    String?  @map("request")
  totalPrice Int      @map("totalPrice")
  status     Status   @map("status")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @map("updatedAt")

  user    Users     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  store   Stores    @relation(fields: [storeId], references: [storeId], onDelete: Cascade, onUpdate: Cascade)
  Reviews Reviews[]

  @@map("Order")
}

enum Status {
  in_progress
  complete
}

model Reviews {
  reviewId  Int      @id @default(autoincrement()) @map("reviewId")
  userId    Int      @map("userId")
  storeId   Int      @map("storeId")
  orderId   Int      @map("orderid")
  rating    Int      @map("rating")
  content   String   @map("content")
  image     String   @map("image")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @map("updatedAt")

  user  Users  @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  store Stores @relation(fields: [storeId], references: [storeId], onDelete: Cascade, onUpdate: Cascade)
  order Orders @relation(fields: [orderId], references: [orderId], onDelete: Cascade, onUpdate: Cascade)

  @@map("Review")
}
